Project 2
written.text

Name: Qing Cheng
Login ID:  qcheng01


Written #1:  How much time I spent on this assignment
-----------------------------------------------------
Week 1 time: 12.25 hrs 
Week 2 time:


Written #2:  How I tested my code
---------------------------------
Presumably, you will use wfltest to test your WordFreqLinkedList.
Give us a few sample sequences of inputs you tried.

For the other parts, did you put tracing print statements in your
BinnedWordFreqList?  I did.  I put in tracing print statements to list
each word as it was being counted, the bin it was sent to, the
resulting length of the list in that bin, and the total number of word
in all the bins together.  I used the debugPrint functions, and I also
put print statements in wordfreq.cpp.

Week 1 testing:
-wordfreq0.cpp
    -I directed the written.text file into cin and the results showed 
     that all the words that previously were capitalized in the file were 
     printed in lowercase (such "I" or my name or the subheadings)
    -at first the program would print the last word twice because of the way 
     cin.eof or cin.fail returns a boolean, so I had to change the structure of 
     the loop a bit so the program reads a word from cin and then check it with 
     eof or fail 
    -ran the program and typed in words with letters that are capitalized in 
     random indices and checked if the words are converted to all lowercase 
-WFLL.cpp 
    -constructor 
    -had a print statement in the constructor so I know that the WFLL object 
     is successfully created 
    -countOccurrence()
    - added print statements (like "we are in the loop") in each loop or 
      conditional so I know where the program ran into error 
     -added print statement to print out the parameter so I know the user input 
     received from main as arg is successfully passed into the function 
    -add() 
    -when main ran, selected "count" and typed in a word, then typed "print"
     to see whether the word was added
    -at first, could only add one word every time program is run because 
     had to figure out how to insert the other words alphabetically
     addAt()
    -then implemented the addAt() and ran the main function again to try to 
     add new words and printing them to see whether they were in alphabetical 
     order 
    -after I added a list of diff words in correct order, tried to enter 
     repeated words to see whether freq would be updated 
    get() 
    -added print statement to print out the index so I know the user input 
    received from main as arg is successfully passed into the function     
    -had a counter to keep track of index of nodes, print out counter at when
     the loop stops and check whether the loop stopped when counter == index 
    -wheretoAdd()
    -supposed to return index at which to insert a node (for alphabetical order)
    -print out the index before returning so I can check whether that index is 
     what I expected 
    size()
    -after adding multiple words using add(), called size()
    -added print statements to print each word's address and their index, as 
     well as the size
    remove()
    -account for no item in list: print out statement saying no item to delete 
    -if item to be deleted is the first in list, then print statement saying
     this was first item in list, and print statement saying the node will be
    deleted before I call delete on the Node struct 
    -prints out statements telling whether the list is empty now or still has 
     other nodes left (can check with debugPrint to see remaining nodes)
    -added some words and tried to delete words at different positions (first, 
     last, in the middle). At first there were some bugs with removing nodes at
     any position except the first, went to office hours, fixed the bug, tried 
     to remove words at different positions again


Week 2 testing:



Written #3:  Timing
-------------------
(You will do this in week 2.  Leave it blank in week 1.)

Use the "/usr/bin/time -p" command as shown in the assignment.  You
may use some novels I downloaded from Project Gutenberg and placed in
/comp/11/files/novels.

Run both versions of your program (wordfreq1 and wordfreq2) on
AliceInWonderland.txt and two other reasonably large files of your
choice.  If you choose something that isn't one of the novels, tell us
what the file was and how big it is.  E. g., show the output of the
"wc" program on it ("wc" will count lines, "words," and characters in
the file).

Take the "user" times and enter them in the table below for
AlicInWonderland.txt and your two other files.


              AliceInWonderLand    YouPick    YouPick
wordfreq1
wordfreq2
